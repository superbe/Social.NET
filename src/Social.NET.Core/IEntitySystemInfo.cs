using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Social.NET.Core
{
	/// <summary>
	/// Интерфейс сущности.
	/// </summary>
	interface IEntitySystemInfo
	{
		/// <summary>
		/// Идентификатор сущности.
		/// </summary>
		int Id { get; set; }

		/// <summary>
		/// Получает или задает атрибуты для текущей сущности.
		/// </summary>
		DateTime CreationTime { get; set; }

		/// <summary>
		/// Получает или задает время последнего доступа к текущей сущности.
		/// </summary>
		DateTime LastAccessTime { get; set; }

		/// <summary>
		/// Получает или задает время последней операции записи в текущую сущность.
		/// </summary>
		DateTime LastWriteTime { get; set; }

		/// <summary>
		/// Возвращает или задает значение, позволяющее определить, является ли текущая сущность доступной только для чтения.
		/// </summary>
		bool IsReadOnly { get; set; }

		/// <summary>
		/// Получает или задает идентификатор пользователя являющегося собственником текущей сущности.
		/// </summary>
		string Owner { get; set; }

		/// <summary>
		/// Получает или задает идентификатор последнего пользователя отредатировавшего текущую сущность.
		/// </summary>
		string LastEditor { get; set; }

		/// <summary>
		/// Версия сущности.
		/// </summary>
		byte[] Version { get; set; }

		/// <summary>
		/// Имя сущности.
		/// </summary>
		string Name { get; set; }

		/// <summary>
		/// Получает или задает идентификаторы ролей для которых доступна текущая сущность.
		/// </summary>
		ICollection<string> Roles { get; set; }

		/// <summary>
		/// Получает или задает идентификаторы пользователей для которых доступна текущая сущность.
		/// </summary>
		ICollection<string> Users { get; set; }

		/// <summary>
		/// Получает или задает доступность текущей сущности.
		/// </summary>
		AccessType Access { get; set; }



		//IObjectInfo Duplicate();
		//IObjectInfo Duplicate(string user);


		// AppendText()											Создает StreamWriter, который добавляет текст в файл, представленный этим экземпляром FileInfo..
		// CopyTo(String)										Копирует существующий файл в новый файл и запрещает перезапись существующего файла.
		// CopyTo(String, Boolean)								Копирует существующий файл в новый файл и разрешает перезапись существующего файла.
		// Create()												Создает файл.
		// CreateObjRef(Type)									Создает объект, который содержит все необходимые сведения, необходимые для создания прокси-сервер, используемый для связи с удаленным объектом.(Наследуется от MarshalByRefObject.)
		// CreateText()											Создает StreamWriter, который записывает новый текстовый файл.
		// Decrypt()											Расшифровывает файл, зашифрованный текущей учетной записью с помощью метода Encrypt.
		// Delete()												Удаляет файл без возможности восстановления.(Переопределяет FileSystemInfo.Delete().)
		// Encrypt()											Шифрует файл таким образом, чтобы его можно было расшифровать только с помощью учетной записи, которая использовалась для шифрования.
		// GetAccessControl()									Возвращает объект FileSecurity, который инкапсулирует записи списка управления доступом(ACL) для файла, описываемого текущим объектом FileInfo.
		// GetAccessControl(AccessControlSections)				Получает объект FileSecurity, который инкапсулирует заданный тип записей списка управления доступом для файла, описываемого текущим объектом FileInfo.
		// GetLifetimeService()									Возвращает объект службы текущее время существования, который управляет политикой времени существования данного экземпляра.(Наследуется от MarshalByRefObject.)
		// GetObjectData(SerializationInfo, StreamingContext)	Устанавливает объект SerializationInfo с именем файла и дополнительными сведениями об исключении.(Наследуется от FileSystemInfo.)
		// InitializeLifetimeService()							Получает объект службы времени существования для управления политикой времени существования данного экземпляра.(Наследуется от MarshalByRefObject.)
		// MoveTo(String)										Перемещает заданный файл в новое местоположение и разрешает переименование файла.
		// Open(FileMode)										Открывает файл в заданном режиме.
		// Open(FileMode, FileAccess)							Открывает файл в заданном режиме с доступом для чтения или записи, или и для чтения, и для записи.
		// Open(FileMode, FileAccess, FileShare)				Открывает файл в заданном режиме с доступом для чтения, записи или и для чтения, и для записи и с заданным параметром совместного доступа.
		// OpenRead()											Создает доступный только для чтения поток FileStream.
		// OpenText()											Создает поток StreamReader с кодировкой UTF-8, который считывает данные из существующего текстового файла.
		// OpenWrite()											Создает доступный только для чтения поток FileStream.
		// Refresh()											Обновляет состояние объекта.(Наследуется от FileSystemInfo.)
		// Replace(String, String)								Заменяет содержимое заданного файла на содержимое файла, которое описано в текущем объекте FileInfo, удаляет исходный файл и создает резервную копию замененного файла.
		// Replace(String, String, Boolean)						Заменяет содержимое заданного файла на содержимое файла, которое описано в текущем объекте FileInfo, удаляет исходный файл и создает резервную копию замененного файла.Также позволяет определить, нужно ли игнорировать ошибки слияния.
		// SetAccessControl(FileSecurity)						Применяет записи списка управления доступом(ACL), описанные объектом FileSecurity, к файлу, который описывается текущим объектом FileInfo.
		// ToString()											Возвращает путь в виде строки.(Переопределяет Object.ToString().)
	}
}